#include "imu_calibration.h"

#include "file_read.h"

#include "imu_calibrated_data.h"

int main()
{
	std::cout<<"----------------- IMU CALIBRATION TEST --------------------"<<std::endl;	

	imu::ImuRead imu_read;

	imu_read.openFile("up.txt");

	std::vector<Eigen::Vector4d> up_accs;
	while( !imu_read.endOfFile() ){
		Eigen::Vector4d up_data;
		if( imu_read.readAccelerometerFrame( up_data ) ){
			up_accs.push_back( up_data );
		}
	}
	imu_read.closeFile();
	
	//for( auto it : up_accs ){
	//	std::cout<<it.transpose()<<std::endl;
	//}

	imu::ImuRead imu_read2;

        imu_read2.openFile("down.txt");

        std::vector<Eigen::Vector4d> down_accs;
        while( !imu_read2.endOfFile() ){
                Eigen::Vector4d down_data;
		if( imu_read2.readAccelerometerFrame( down_data ) ){
                	down_accs.push_back( down_data );
        	}
	}
        imu_read2.closeFile();

	imu::ImuRead imu_read3;

        imu_read3.openFile("left.txt");

        std::vector<Eigen::Vector4d> left_accs;
        while( !imu_read3.endOfFile() ){
                Eigen::Vector4d left_data;
                if( imu_read3.readAccelerometerFrame( left_data ) ){
                	left_accs.push_back( left_data );
		}
        }
        imu_read3.closeFile();


	imu::ImuRead imu_read4;

        imu_read4.openFile("right.txt");

        std::vector<Eigen::Vector4d> right_accs;
        while( !imu_read4.endOfFile() ){
                Eigen::Vector4d right_data;
                if( imu_read4.readAccelerometerFrame( right_data ) ){	
	                right_accs.push_back( right_data );
		}
        }
        imu_read4.closeFile();

	imu::ImuRead imu_read5;

        imu_read5.openFile("front.txt");

        std::vector<Eigen::Vector4d> front_accs;
        while( !imu_read5.endOfFile() ){
                Eigen::Vector4d front_data;
                if( imu_read5.readAccelerometerFrame( front_data ) ){

                	front_accs.push_back( front_data );
		}
        }
        imu_read5.closeFile();

	imu::ImuRead imu_read6;

        imu_read6.openFile("back.txt");

        std::vector<Eigen::Vector4d> back_accs;
        while( !imu_read6.endOfFile() ){
                Eigen::Vector4d back_data;
                if( imu_read6.readAccelerometerFrame( back_data ) ){
                	back_accs.push_back( back_data );
		}
        }
        imu_read6.closeFile();

	Eigen::Matrix<double, 6, 1> acc_para = imu::CalibrateAccelerometer<double>()( up_accs, down_accs, left_accs, right_accs, front_accs, back_accs );
	std::cout<<"accelerometer's parameter : "<<std::endl<<acc_para<<std::endl;

	// test
	imu::IMU_Calibrated<double>::setAccelerometerParamters( acc_para );
	for( size_t i = 0; i < front_accs.size(); i ++ ){
		std::cout<<"test: "<<i + 1<<std::endl<<imu::IMU_Calibrated<double>::getCalibratedAcceleration( front_accs[i].block( 1, 0, 3, 1 ) ) << std::endl<<std::endl ;
	}

	return 0;
}
